version: 2

jobs:
  build:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.7.3
        environment:
          MIX_ENV: test
      - image: mdillon/postgis:9.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: app_test
          POSTGRES_PASSWORD:
    working_directory: ~/side-project/backend

    steps:
      - checkout:
          path: ~/side-project
      - restore_cache: # restores saved mix cache
          keys:
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache    
      - restore_cache: # restores saved build cache
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache 
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix do deps.get, compile   
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache
          paths: "deps"
      - save_cache:
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache:
          key: v1-build-cache
          paths: "_build"
      - run: # special utility that stalls main process until DB is ready
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
     
      - run: mix ecto.create  && mix ecto.migrate   
      - run: mix test
      - store_test_results:  # upload junit test results for display in Test Summary
          path: _build/test/lib/backend 

  deploy:
    machine:
      enabled: true
    environment:
      AWS_DEFAULT_OUTPUT: json
    working_directory: ~/side-project/backend
    steps:
      - checkout:
          path: ~/side-project/backend  
      - run:
          name: Run Deploy Script 
          command: |
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_ECS_URL="${AWS_ECS_URL}"
            export AWS_ECS_PROJECT_NAME="${AWS_ECS_PROJECT_NAME}"
            export AWS_ECS_CONTAINER_NAME="${AWS_ECS_CONTAINER_NAME}"
            export AWS_ECS_DOCKER_IMAGE="${AWS_ECS_DOCKER_IMAGE}"
            export AWS_ECS_CLUSTER_NAME="${AWS_ECS_CLUSTER_NAME}"
            export AWS_S3_BUCKET="${AWS_S3_BUCKET}"
            export POSTGRES_DB_URL="${POSTGRES_DB_URL}"
            export POSTGRES_DB_POOL_SIZE="${POSTGRES_DB_POOL_SIZE}"
            export PHOENIX_SECRET_KEY_BASE="${PHOENIX_SECRET_KEY_BASE}"
            export FIREBASE_SECRET_PEM_FILE_PATH="${FIREBASE_SECRET_PEM_FILE_PATH}"
            export FIREBASE_SERVICE_ACCOUNT_EMAIL="${FIREBASE_SERVICE_ACCOUNT_EMAIL}"
            export HOST="${HOST}"
            export PORT="${PORT}"
            cd backend
            sh ./config/ci/deploy.sh

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master